#!/bin/bash

# Generate a random password of four common words (using CORRECT HORSE
# BATTERY STAPLE algorithm as detailed in XKCD 936).

# Note: Unlike XKCD 936, results are sorted alphabetically to make it
# easier to remember. (User doesn't have to try all 24 different
# possibilities, but security is not much worse).

# hackerb9 September 2017

numwords=4			# Number of random common words to pick

if [[ "$1" == "-v" ]]; then
    debug="echo Debug:"
else
    debug=:
fi


function log2() {    # int floor log2 (lowball of base 2 logarithm)
    local  x=$(( $1/2 ))
    [[ x -lt 1 ]] && echo 0 ||  echo $(( 1 + $(log2 $x) ))
}


function checksize() {		# Complain about dictionary size, if need be
    $debug "Size of $dict is $size"
    $debug "Bits of entropy: $((numwords * $(log2 $size) ))"

    if [[ $size -gt 32767 ]]; then
	echo "Warning: Dictionary is overly large and will contain uncommon words." >&2
	echo "         Passphrase may be hard to remember." >&2
	echo "         You can fix this with: apt install scowl." >&2
    fi

    if [[ $size -lt 2048 ]]; then
	echo "Warning: Dictionary $dict only has $size words." >&2
	echo "         This will not be as secure as XKCD 936." >&2
	echo "         You can fix this with: apt install scowl." >&2
    fi
}


#### MAIN

# Use the most common 10% of English words, if we've got scowl installed.
# If scowl isn't installed, just use the standard UNIX word list.
for d in /usr/share/dict/scowl/english-words.10 /usr/share/dict/words
do
    if [ -r "$d" ]; then dict=$d; break; fi
done

if [ -z "$dict" ]; then
    echo "Could not find a word list. Please install 'scowl' using apt install scowl."
    exit 1
fi

# Slurp!
mapfile words < <(grep '^[a-z]*$' "$dict")

size=${#words[@]}
checksize


# Pick the random words
for i in $(seq $numwords); do
    # Bash's RANDOM is only 15 bits, so use it twice for 30.
    phrase[i]=${words[(RANDOM<<15 + RANDOM)%size]}
done

# Print them sorted
echo $(sort <<< "${phrase[@]}")
